// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_message.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const feedMessageByID = `-- name: FeedMessageByID :one
SELECT
    id, created_at, updated_at
FROM
    feed_messages
WHERE
    id = $1
`

func (q *Queries) FeedMessageByID(ctx context.Context, id uuid.UUID) (FeedMessage, error) {
	row := q.db.QueryRow(ctx, feedMessageByID, id)
	var i FeedMessage
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const feedMessageDeleteByID = `-- name: FeedMessageDeleteByID :exec
DELETE FROM
    feed_messages
WHERE
    id = $1
`

func (q *Queries) FeedMessageDeleteByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, feedMessageDeleteByID, id)
	return err
}

const feedMessageGetAll = `-- name: FeedMessageGetAll :many
SELECT
    id, created_at, updated_at
FROM
    feed_messages
ORDER BY
    -- For created_at
    CASE
        WHEN $1 :: text = 'created_at:asc' THEN created_at
    END ASC NULLS LAST,
    CASE
        WHEN $1 = 'created_at:desc' THEN created_at
    END DESC NULLS LAST,
    -- Add this to the end of the order by clause so that items are ordered
    -- consistently within an ordered set for consistent results between pages
    id DESC
LIMIT $3 OFFSET $2
`

type FeedMessageGetAllParams struct {
	OrderBy string
	Offset  int32
	Limit   int32
}

func (q *Queries) FeedMessageGetAll(ctx context.Context, arg FeedMessageGetAllParams) ([]FeedMessage, error) {
	rows, err := q.db.Query(ctx, feedMessageGetAll, arg.OrderBy, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedMessage
	for rows.Next() {
		var i FeedMessage
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const feedMessageGetAllCount = `-- name: FeedMessageGetAllCount :one
SELECT
    COUNT(*)
FROM
    feed_messages
`

func (q *Queries) FeedMessageGetAllCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, feedMessageGetAllCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
