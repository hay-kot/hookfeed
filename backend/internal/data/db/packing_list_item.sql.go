// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: packing_list_item.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const packingListItemByID = `-- name: PackingListItemByID :one
SELECT
    id, created_at, updated_at, packing_list_id, name, category, quantity, is_packed, notes
FROM
    packing_list_items
WHERE
    id = $1
`

func (q *Queries) PackingListItemByID(ctx context.Context, id uuid.UUID) (PackingListItem, error) {
	row := q.db.QueryRow(ctx, packingListItemByID, id)
	var i PackingListItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PackingListID,
		&i.Name,
		&i.Category,
		&i.Quantity,
		&i.IsPacked,
		&i.Notes,
	)
	return i, err
}

const packingListItemCreate = `-- name: PackingListItemCreate :one
INSERT INTO
    packing_list_items (
        packing_list_id,
        name,
        category,
        notes,
        quantity,
        is_packed
    )
VALUES
    ($1, $2, $3, $4, $5, false) RETURNING id, created_at, updated_at, packing_list_id, name, category, quantity, is_packed, notes
`

type PackingListItemCreateParams struct {
	PackingListID uuid.UUID
	Name          string
	Category      string
	Notes         string
	Quantity      int32
}

func (q *Queries) PackingListItemCreate(ctx context.Context, arg PackingListItemCreateParams) (PackingListItem, error) {
	row := q.db.QueryRow(ctx, packingListItemCreate,
		arg.PackingListID,
		arg.Name,
		arg.Category,
		arg.Notes,
		arg.Quantity,
	)
	var i PackingListItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PackingListID,
		&i.Name,
		&i.Category,
		&i.Quantity,
		&i.IsPacked,
		&i.Notes,
	)
	return i, err
}

const packingListItemDeleteByID = `-- name: PackingListItemDeleteByID :exec
DELETE FROM
    packing_list_items
WHERE
    id = $1
`

func (q *Queries) PackingListItemDeleteByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, packingListItemDeleteByID, id)
	return err
}

const packingListItemGetAll = `-- name: PackingListItemGetAll :many
SELECT
    id, created_at, updated_at, packing_list_id, name, category, quantity, is_packed, notes
FROM
    packing_list_items
WHERE
    packing_list_id = $1
ORDER BY
    created_at DESC,
    id DESC
`

func (q *Queries) PackingListItemGetAll(ctx context.Context, packingListID uuid.UUID) ([]PackingListItem, error) {
	rows, err := q.db.Query(ctx, packingListItemGetAll, packingListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackingListItem
	for rows.Next() {
		var i PackingListItem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PackingListID,
			&i.Name,
			&i.Category,
			&i.Quantity,
			&i.IsPacked,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const packingListItemUpdate = `-- name: PackingListItemUpdate :one
UPDATE
    packing_list_items
SET
    name = COALESCE($1, name),
    category = COALESCE($2, category),
    notes = COALESCE($3, notes),
    quantity = COALESCE($4, quantity),
    is_packed = COALESCE($5, is_packed)
WHERE
    id = $6 RETURNING id, created_at, updated_at, packing_list_id, name, category, quantity, is_packed, notes
`

type PackingListItemUpdateParams struct {
	Name     *string
	Category *string
	Notes    *string
	Quantity *int32
	IsPacked *bool
	ID       uuid.UUID
}

func (q *Queries) PackingListItemUpdate(ctx context.Context, arg PackingListItemUpdateParams) (PackingListItem, error) {
	row := q.db.QueryRow(ctx, packingListItemUpdate,
		arg.Name,
		arg.Category,
		arg.Notes,
		arg.Quantity,
		arg.IsPacked,
		arg.ID,
	)
	var i PackingListItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PackingListID,
		&i.Name,
		&i.Category,
		&i.Quantity,
		&i.IsPacked,
		&i.Notes,
	)
	return i, err
}
