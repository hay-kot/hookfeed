# https://taskfile.dev

version: "3"

vars:
  GREETING: Hello, World!

dotenv:
  - .env

tasks:
  swag:
    dir: backend/internal/web/docs/
    desc: Generate swagger docs
    sources:
      - ./backend/cmd/api/main.go
      - ./backend/internal/data/dtos/*.go
      - ./backend/internal/web/handlers/*.go
    generates:
      - ./backend/internal/web/docs/swagger.json
    vars:
      BACKEND: ./../../..
    cmds:
      - echo {{ .BACKEND }}
      - swag fmt --dir={{ .BACKEND }}/internal
      - |
        swag init --outputTypes=json \
          --generalInfo {{ .BACKEND }}/cmd/api/main.go \
          --dir={{ .BACKEND }}/internal/xapps/webapi/ \
          --output={{ .BACKEND }}/internal/web/docs/ \
          --parseDependency

  gen:ts:
    desc: Generate typescript types
    cmds:
      - |
        swagger-typescript-api generate \
         --no-client \
         --modular \
         --path ./backend/internal/web/docs/swagger.json \
         --output ./frontend/lib/api/types \
    sources:
      - "./backend/internal/web/docs/swagger.json"

  gen:code:
    desc: run new code generators
    dir: backend
    sources:
      - "./frontend/lib/api/types/data-contracts.ts"
      - "./backend/internal/web/docs/swagger.json"
    cmds:
      - go run ./cmd/tools/codegen/ generate --config=../codegen.json

  gen:
    deps:
      - swag
    cmds:
      - task: gen:ts
      - task: gen:code

  svc:
    desc: Start postgres for development
    cmds:
      - docker compose up postgres-dev

  svc:full:
    desc: Start all services (postgres, mailpit, hookfeed)
    cmds:
      - docker compose up

  svc:clean:
    desc: Stop all services and remove volumes
    cmds:
      - docker compose down -v

  svc:build:
    desc: Build the hookfeed docker image
    deps:
      - build
    cmds:
      - docker compose build hookfeed

  tidy:
    dir: backend
    cmds:
      - go mod tidy

  lint:
    dir: backend
    desc: Runs golangci-lint
    cmds:
      - golangci-lint run ./...

  fmt:
    desc: Runs golangci-lint fmt on the backend
    dir: backend
    cmds:
      - golangci-lint fmt

  run:
    dir: backend
    deps:
      - gen
    cmds:
      - go run ./cmd/hookfeed/ serve --config=../dev/dev.feeds.yml --middleware-dir=../dev/middleware

  seed:
    dir: backend
    deps:
      - gen
    cmds:
      - go run ./cmd/tools/seed/ seed --config=../seedfile.json

  test:
    dir: backend
    desc: Runs all go tests
    cmds:
      - go test {{ .CLI_ARGS }} ./...

  build:ui:
    dir: frontend
    desc: Build frontend UI
    cmds:
      - bun install
      - bun run generate
      - rm -rf ../backend/internal/static/public/*
      - cp -r .output/public/* ../backend/internal/static/public/
    sources:
      - "**/*.vue"
      - "**/*.ts"
      - "**/*.js"
      - package.json
      - nuxt.config.ts

  build:
    dir: backend
    desc: Build local dev version for testing
    deps:
      - build:ui
    cmds:
      - goreleaser release --snapshot --clean --skip=publish
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
      - .goreleaser.yml
      - internal/static/public/**

  db:sqlc:
    aliases: ["sqlc"]
    dir: backend
    desc: "Generate the sqlc code"
    sources:
      - ./internal/data/db/migrations/sql/*.sql
      - ./internal/data/db/*.sql
      - ./sqlc.yml
    generates:
      - ./internal/data/db/*.go
    cmds:
      - sqlc generate

  db:migrate:
    desc: "Creates a new up/down migration ex: `task db:migrate:empty -- create_user_table`"
    dir: ./backend/internal/data/db/migrations/sql
    cmds:
      - goose create {{ .CLI_ARGS }} sql

  ui:*:
    desc: Forwards commands to the bun/package.json file
    dir: frontend
    cmds:
      - bun run {{ index .MATCH 0 }}

  webhook:test:
    desc: Send a test webhook to the dev-test feed
    cmds:
      - ./dev/send-webhook.sh {{ .CLI_ARGS }}

  webhook:bulk:
    desc: Send multiple test webhooks (default 5)
    cmds:
      - ./dev/send-webhooks-bulk.sh {{ .CLI_ARGS }}

  msgs:
    desc: Send test ntfy messages with different priorities
    cmds:
      - ./dev/messages.sh {{ .CLI_ARGS }}

  publish:
    desc: "Publish a new release (usage: task publish -- patch|minor|major)"
    dir: backend
    deps:
      - build:ui
    vars:
      BUMP_TYPE: '{{default "patch" .CLI_ARGS}}'
      CURRENT_VERSION:
        sh: git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0"
      NEXT_VERSION:
        sh: svu {{.BUMP_TYPE}}
    cmds:
      - echo "Current version:{{.CURRENT_VERSION}}"
      - echo "Next version:{{.NEXT_VERSION}}"
      - echo "Publishing {{.NEXT_VERSION}}..."
      - git tag -a {{.NEXT_VERSION}} -m "Release {{.NEXT_VERSION}}"
      - git push origin {{.NEXT_VERSION}}
      - goreleaser release --clean
    preconditions:
      - sh: '[ -n "$GITHUB_TOKEN" ]'
        msg: "GITHUB_TOKEN environment variable must be set. Create a .env file with GITHUB_TOKEN=your_token"
      - sh: 'git diff --quiet -- . ":!backend/internal/static/public/"'
        msg: "Working directory must be clean before publishing (ignoring generated static files)"
      - sh: '[ "{{.CLI_ARGS}}" = "patch" ] || [ "{{.CLI_ARGS}}" = "minor" ] || [ "{{.CLI_ARGS}}" = "major" ]'
        msg: 'Must specify version bump type: task publish -- patch|minor|major'
      - sh: command -v svu >/dev/null 2>&1
        msg: "svu is required. Install with: go install github.com/caarlos0/svu@latest"
